# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: flyteidl/core/condition.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from flyteidl.core import literals_pb2 as flyteidl_dot_core_dot_literals__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='flyteidl/core/condition.proto',
  package='flyteidl.core',
  syntax='proto3',
  serialized_options=_b('Z4github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core'),
  serialized_pb=_b('\n\x1d\x66lyteidl/core/condition.proto\x12\rflyteidl.core\x1a\x1c\x66lyteidl/core/literals.proto\"\xee\x01\n\x14\x43omparisonExpression\x12>\n\x08operator\x18\x01 \x01(\x0e\x32,.flyteidl.core.ComparisonExpression.Operator\x12*\n\nleft_value\x18\x02 \x01(\x0b\x32\x16.flyteidl.core.Operand\x12+\n\x0bright_value\x18\x03 \x01(\x0b\x32\x16.flyteidl.core.Operand\"=\n\x08Operator\x12\x06\n\x02\x45Q\x10\x00\x12\x07\n\x03NEQ\x10\x01\x12\x06\n\x02GT\x10\x02\x12\x07\n\x03GTE\x10\x03\x12\x06\n\x02LT\x10\x04\x12\x07\n\x03LTE\x10\x05\"N\n\x07Operand\x12-\n\tprimitive\x18\x01 \x01(\x0b\x32\x18.flyteidl.core.PrimitiveH\x00\x12\r\n\x03var\x18\x02 \x01(\tH\x00\x42\x05\n\x03val\"\x93\x01\n\x11\x42ooleanExpression\x12;\n\x0b\x63onjunction\x18\x01 \x01(\x0b\x32$.flyteidl.core.ConjunctionExpressionH\x00\x12\x39\n\ncomparison\x18\x02 \x01(\x0b\x32#.flyteidl.core.ComparisonExpressionH\x00\x42\x06\n\x04\x65xpr\"\xfa\x01\n\x15\x43onjunctionExpression\x12\x46\n\x08operator\x18\x01 \x01(\x0e\x32\x34.flyteidl.core.ConjunctionExpression.LogicalOperator\x12\x39\n\x0fleft_expression\x18\x02 \x01(\x0b\x32 .flyteidl.core.BooleanExpression\x12:\n\x10right_expression\x18\x03 \x01(\x0b\x32 .flyteidl.core.BooleanExpression\"\"\n\x0fLogicalOperator\x12\x07\n\x03\x41ND\x10\x00\x12\x06\n\x02OR\x10\x01\x42\x36Z4github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/coreb\x06proto3')
  ,
  dependencies=[flyteidl_dot_core_dot_literals__pb2.DESCRIPTOR,])



_COMPARISONEXPRESSION_OPERATOR = _descriptor.EnumDescriptor(
  name='Operator',
  full_name='flyteidl.core.ComparisonExpression.Operator',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='EQ', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NEQ', index=1, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GT', index=2, number=2,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GTE', index=3, number=3,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='LT', index=4, number=4,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='LTE', index=5, number=5,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=256,
  serialized_end=317,
)
_sym_db.RegisterEnumDescriptor(_COMPARISONEXPRESSION_OPERATOR)

_CONJUNCTIONEXPRESSION_LOGICALOPERATOR = _descriptor.EnumDescriptor(
  name='LogicalOperator',
  full_name='flyteidl.core.ConjunctionExpression.LogicalOperator',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='AND', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OR', index=1, number=1,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=766,
  serialized_end=800,
)
_sym_db.RegisterEnumDescriptor(_CONJUNCTIONEXPRESSION_LOGICALOPERATOR)


_COMPARISONEXPRESSION = _descriptor.Descriptor(
  name='ComparisonExpression',
  full_name='flyteidl.core.ComparisonExpression',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='operator', full_name='flyteidl.core.ComparisonExpression.operator', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='left_value', full_name='flyteidl.core.ComparisonExpression.left_value', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='right_value', full_name='flyteidl.core.ComparisonExpression.right_value', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _COMPARISONEXPRESSION_OPERATOR,
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=79,
  serialized_end=317,
)


_OPERAND = _descriptor.Descriptor(
  name='Operand',
  full_name='flyteidl.core.Operand',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='primitive', full_name='flyteidl.core.Operand.primitive', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='var', full_name='flyteidl.core.Operand.var', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='val', full_name='flyteidl.core.Operand.val',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=319,
  serialized_end=397,
)


_BOOLEANEXPRESSION = _descriptor.Descriptor(
  name='BooleanExpression',
  full_name='flyteidl.core.BooleanExpression',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='conjunction', full_name='flyteidl.core.BooleanExpression.conjunction', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='comparison', full_name='flyteidl.core.BooleanExpression.comparison', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='expr', full_name='flyteidl.core.BooleanExpression.expr',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=400,
  serialized_end=547,
)


_CONJUNCTIONEXPRESSION = _descriptor.Descriptor(
  name='ConjunctionExpression',
  full_name='flyteidl.core.ConjunctionExpression',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='operator', full_name='flyteidl.core.ConjunctionExpression.operator', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='left_expression', full_name='flyteidl.core.ConjunctionExpression.left_expression', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='right_expression', full_name='flyteidl.core.ConjunctionExpression.right_expression', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _CONJUNCTIONEXPRESSION_LOGICALOPERATOR,
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=550,
  serialized_end=800,
)

_COMPARISONEXPRESSION.fields_by_name['operator'].enum_type = _COMPARISONEXPRESSION_OPERATOR
_COMPARISONEXPRESSION.fields_by_name['left_value'].message_type = _OPERAND
_COMPARISONEXPRESSION.fields_by_name['right_value'].message_type = _OPERAND
_COMPARISONEXPRESSION_OPERATOR.containing_type = _COMPARISONEXPRESSION
_OPERAND.fields_by_name['primitive'].message_type = flyteidl_dot_core_dot_literals__pb2._PRIMITIVE
_OPERAND.oneofs_by_name['val'].fields.append(
  _OPERAND.fields_by_name['primitive'])
_OPERAND.fields_by_name['primitive'].containing_oneof = _OPERAND.oneofs_by_name['val']
_OPERAND.oneofs_by_name['val'].fields.append(
  _OPERAND.fields_by_name['var'])
_OPERAND.fields_by_name['var'].containing_oneof = _OPERAND.oneofs_by_name['val']
_BOOLEANEXPRESSION.fields_by_name['conjunction'].message_type = _CONJUNCTIONEXPRESSION
_BOOLEANEXPRESSION.fields_by_name['comparison'].message_type = _COMPARISONEXPRESSION
_BOOLEANEXPRESSION.oneofs_by_name['expr'].fields.append(
  _BOOLEANEXPRESSION.fields_by_name['conjunction'])
_BOOLEANEXPRESSION.fields_by_name['conjunction'].containing_oneof = _BOOLEANEXPRESSION.oneofs_by_name['expr']
_BOOLEANEXPRESSION.oneofs_by_name['expr'].fields.append(
  _BOOLEANEXPRESSION.fields_by_name['comparison'])
_BOOLEANEXPRESSION.fields_by_name['comparison'].containing_oneof = _BOOLEANEXPRESSION.oneofs_by_name['expr']
_CONJUNCTIONEXPRESSION.fields_by_name['operator'].enum_type = _CONJUNCTIONEXPRESSION_LOGICALOPERATOR
_CONJUNCTIONEXPRESSION.fields_by_name['left_expression'].message_type = _BOOLEANEXPRESSION
_CONJUNCTIONEXPRESSION.fields_by_name['right_expression'].message_type = _BOOLEANEXPRESSION
_CONJUNCTIONEXPRESSION_LOGICALOPERATOR.containing_type = _CONJUNCTIONEXPRESSION
DESCRIPTOR.message_types_by_name['ComparisonExpression'] = _COMPARISONEXPRESSION
DESCRIPTOR.message_types_by_name['Operand'] = _OPERAND
DESCRIPTOR.message_types_by_name['BooleanExpression'] = _BOOLEANEXPRESSION
DESCRIPTOR.message_types_by_name['ConjunctionExpression'] = _CONJUNCTIONEXPRESSION
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

ComparisonExpression = _reflection.GeneratedProtocolMessageType('ComparisonExpression', (_message.Message,), dict(
  DESCRIPTOR = _COMPARISONEXPRESSION,
  __module__ = 'flyteidl.core.condition_pb2'
  # @@protoc_insertion_point(class_scope:flyteidl.core.ComparisonExpression)
  ))
_sym_db.RegisterMessage(ComparisonExpression)

Operand = _reflection.GeneratedProtocolMessageType('Operand', (_message.Message,), dict(
  DESCRIPTOR = _OPERAND,
  __module__ = 'flyteidl.core.condition_pb2'
  # @@protoc_insertion_point(class_scope:flyteidl.core.Operand)
  ))
_sym_db.RegisterMessage(Operand)

BooleanExpression = _reflection.GeneratedProtocolMessageType('BooleanExpression', (_message.Message,), dict(
  DESCRIPTOR = _BOOLEANEXPRESSION,
  __module__ = 'flyteidl.core.condition_pb2'
  # @@protoc_insertion_point(class_scope:flyteidl.core.BooleanExpression)
  ))
_sym_db.RegisterMessage(BooleanExpression)

ConjunctionExpression = _reflection.GeneratedProtocolMessageType('ConjunctionExpression', (_message.Message,), dict(
  DESCRIPTOR = _CONJUNCTIONEXPRESSION,
  __module__ = 'flyteidl.core.condition_pb2'
  # @@protoc_insertion_point(class_scope:flyteidl.core.ConjunctionExpression)
  ))
_sym_db.RegisterMessage(ConjunctionExpression)


DESCRIPTOR._options = None
# @@protoc_insertion_point(module_scope)
